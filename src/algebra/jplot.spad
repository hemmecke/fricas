)abbrev package JPLOT JuliaPlotFunctions
++ Author: G. Vanuxem
++ Date Created: march 2023
++ Basic Operations: jlPlot, jlSurface
++ Keywords: plot
++ Description: low level plotting functions
++ using the StatsPlots module from Julia.
JuliaPlotFunctions() : Exports == Implementation where
  NNI     ==> NonNegativeInteger
  JF64    ==> JuliaFloat64
  JSTR    ==> JuliaString
  SF      ==> DoubleFloat
  SEG     ==> Segment Float
  JF64VEC ==> JuliaFloat64Vector
  JF64MAT ==> JuliaFloat64Matrix
  Exports ==> with
    jlRange : SEG -> JuliaFloat64Vector
    ++ jlRange(range) is a utility function that returns a JuliaFloat64Vector
    ++ with 250 points from \spad{low(range)} to \spad{high(range)}.
    jlRange : (SEG, PositiveInteger) -> JuliaFloat64Vector
    ++ jlRange(range, n) is a utility function that returns a
    ++ JuliaFloat64Vector with n points from \spad{low(range)}
    ++ to \spad{high(range)}.
    jlDensity : JF64VEC -> Void
    ++ jlDensity(x) draws a line plot of a kernel density estimate of x.
    jlDensity! : JF64VEC -> Void
    ++ jlDensity!(x) draws a line plot of a kernel density estimate of x
    ++ on the existing graph object.
    jlPlot : (JF64VEC, JF64VEC) -> Void
    ++ jlPlot(x,y) draws a plot using elements of x and y.
    jlPlot! : (JF64VEC, JF64VEC) -> Void
    ++ jlPlot!(x,y) draws a plot using elements of x and y
    ++ on the existing graph object.
    jlCurves : (JF64VEC, JF64VEC) -> Void
    ++ jlCurves(x,y) draws a Bezier plot curve
    ++ from (x.1,y.1) to (x.end,y.end) with control points (x.2,y.2),...,
    ++ (x.end-1,y.end-1) and draws it.
    jlCurves! : (JF64VEC, JF64VEC) -> Void
    ++ jlCurves!(x,y) draws a Bezier plot curve
    ++ from (x.1,y.1) to (x.end,y.end) with control points (x.2,y.2),...,
    ++ (x.end-1,y.end-1) and draws it on the existing graph object.
    jlBar : (JF64VEC, JF64VEC) -> Void
    ++ jlBar(x,y) draws a bar plot of y vs x.
    jlBar! : (JF64VEC, JF64VEC) -> Void
    ++ jlBar!(x,y) draws a bar plot of y vs x on the existing graph object.
    jlPlot : (JF64VEC, JF64VEC, JF64VEC) -> Void
    ++ jlPlot(x,y,z) draws a plot using elements of x, y and z.
    jlPlot! : (JF64VEC, JF64VEC, JF64VEC) -> Void
    ++ jlPlot(x,y,z) draws a plot using elements of x, y and z
    ++ on the existing graph object.
    jlWireframe : (JF64VEC, JF64VEC, JF64MAT) -> Void
    ++ jlWireframe(x,y,mat) draws the wireframe surface of mat.
    jlWireframe! : (JF64VEC, JF64VEC, JF64MAT) -> Void
    ++ jlWireframe!(x,y,mat) draws the wireframe surface of mat
    ++ on the existing graph object.
    jlSurface : (JF64VEC, JF64VEC, JF64MAT) -> Void
    ++ jlSurface(x,y,mat) draws the plot surface of mat.
    jlSurface! : (JF64VEC, JF64VEC, JF64MAT) -> Void
    ++ jlSurface!(x,y,mat) draws the plot surface of mat
    ++ on the existing graph object.
    jlContour : (JF64VEC, JF64VEC, JF64MAT) -> Void
    ++ jlContour(x,y,mat) draws the contour plot of surface mat.
    jlContour! : (JF64VEC, JF64VEC, JF64MAT) -> Void
    ++ jlContour!(x,y,mat) draws the contour plot of surface mat
    ++ on the existing graph object.
    jlContourf : (JF64VEC, JF64VEC, JF64MAT) -> Void
    ++ jlContourf(x,y,mat) draws the contour plot of surface mat.
    ++ Fill area between contours.
    jlContourf! : (JF64VEC, JF64VEC, JF64MAT) -> Void
    ++ jlContourf!(x,y,mat) draws the contour plot of surface mat
    ++ on the existing graph object. Fill area between contours.
    jlPlotTitle! : JSTR -> Void
    ++ jlPlotTitle!(title) draws `title' as plot title in the current plot.
    jlPlotXlims! : (JF64, JF64) -> Void
    ++ jlPlotXlims!(x1,x2) sets x plot limits.
    jlPlotYlims! : (JF64, JF64) -> Void
    ++ jlPlotYlims!(y1,y2) sets y plot limits.
    jlPlotZlims! : (JF64, JF64) -> Void
    ++ jlPlotZlims!(z1,z2) sets z plot limits.
    jlPlotXlabel! : JSTR -> Void
    ++ jlPlotXlabel!(str) sets x label.
    jlPlotYlabel! : JSTR -> Void
    ++ jlPlotYlabel!(str) sets y label.
    jlPlotZlabel! : JSTR -> Void
    ++ jlPlotZlabel!(str) sets z label.
    
    -- Should be moved to another package 
    jlPlot : (SF -> SF, SEG) -> Void
    ++ jlPlot(f, a..b) draws the graph of \spad{y = f(x)} as x
    ++ ranges from \spad{min(a, b)} to \spad{max(a, b)}.
    jlPlot! : (SF -> SF, SEG) -> Void
    ++ jlPlot!(f, a..b) adds the graph of \spad{y = f(x)} as x
    ++ ranges from \spad{min(a, b)} to \spad{max(a, b)}
    ++ to the existing graph object.
    jlPlot : ((SF, SF) -> SF, SEG, SEG) -> Void
    ++ jlPlot(f, a..b, c..d) draws the graph of \spad{z = f(x, y)} as x
    ++ ranges from \spad{min(a, b)} to \spad{max(a, b)} and y
    ++ ranges from \spad{min(c, d)} to \spad{max(c, d)}
    jlPlot! : ((SF, SF) -> SF, SEG, SEG) -> Void
    ++ jlPlot!(f, a..b, c..d) adds the graph of \spad{z = f(x, y)} as x
    ++ ranges from \spad{min(a, b)} to \spad{max(a, b)} and y
    ++ ranges from \spad{min(c, d)} to \spad{max(c, d)}
    ++ on the existing graph object.
    jlWireframe : ((SF, SF) -> SF, SEG, SEG) -> Void
    ++ jlWireframe(f, a..b, c..d) draws the wireframe of
    ++ \spad{y = f(x,y)} as x ranges from \spad{min(a, b)}
    ++ to \spad{max(a, b)} and y ranges from \spad{min(c, d)}
    ++ to \spad{max(c, d)}.
    jlWireframe! : ((SF, SF) -> SF, SEG, SEG) -> Void
    ++ jlWireframe!(f, a..b, c..d) draws add the wireframe
    ++ of \spad{y = f(x,y)} as x ranges from \spad{min(a, b)}
    ++ to \spad{max(a, b)} and y ranges from \spad{min(c, d)}
    ++ to \spad{max(c, d)} on the existing graph object.
    jlSurface : ((SF, SF) -> SF, SEG, SEG) -> Void
    ++ jlSurface(f, a..b, c..d) draws the surface of \spad{y = f(x,y)} as x
    ++ ranges from \spad{min(a, b)} to \spad{max(a, b)} and y
    ++ ranges from \spad{min(c, d)} to \spad{max(c, d)}.
    jlSurface! : ((SF, SF) -> SF, SEG, SEG) -> Void
    ++ jlSurface!(f, a..b, c..d) draws the surface
    ++ of \spad{y = f(x,y)} as x ranges from \spad{min(a, b)}
    ++ to \spad{max(a, b)} and y ranges from \spad{min(c, d)}
    ++ to \spad{max(c, d)} on the existing graph object.
    jlContour : ((SF, SF) -> SF, SEG, SEG) -> Void
    ++ jlContour(f, a..b, c..d) draws the contour plot
    ++ of \spad{y = f(x,y)} as x ranges from \spad{min(a, b)}
    ++ to \spad{max(a, b)} and y ranges from \spad{min(c, d)}
    ++ to \spad{max(c, d)}.
    jlContour! : ((SF, SF) -> SF, SEG, SEG) -> Void
    ++ jlContour!(f, a..b, c..d) draws the contour plot
    ++ of \spad{y = f(x,y)} as x ranges from \spad{min(a, b)}
    ++ to \spad{max(a, b)} and y ranges from \spad{min(c, d)}
    ++ to \spad{max(c, d)} on the existing graph object.
    jlContourf : ((SF, SF) -> SF, SEG, SEG) -> Void
    ++ jlContourf(f, a..b, c..d) draws the contour plot
    ++ of \spad{y = f(x,y)} as x ranges from \spad{min(a, b)}
    ++ to \spad{max(a, b)} and y ranges from \spad{min(c, d)}
    ++ to \spad{max(c, d)}. Fill area between contours.
    jlContourf! : ((SF, SF) -> SF, SEG, SEG) -> Void
    ++ jlContourf!(f, a..b, c..d) draws the contour plot
    ++ of \spad{y = f(x,y)} as x ranges from \spad{min(a, b)}
    ++ to \spad{max(a, b)} and y ranges from \spad{min(c, d)}
    ++ to \spad{max(c, d)} on the existing graph object.
    ++ Fill area between contours.
  Implementation ==> add
    import from String
    import from JuliaUtilityFunctions

    str(s) ==> s pretend String
    jstr(s) ==> s pretend JuliaString
    pdf(x) ==> x pretend SF
    POINTS ==> 250

--    not jlDefined?("plot")
--        => error
--            concat(["You need to load a Julia data visualisation package.", _
--                coerce(newline()$Character)@String,
--                "   You can use Plots or StatsPlots.",-- or Mackie.",
--                --" The later does not support some routune defined here",
--                coerce(newline()$Character)@String,
--                "   Use the jlAddPackage function or Julia itself to add it.",
--                coerce(newline()$Character)@String,
--                "   If a data visualisation package is installed,",
--                " you can add it",
--                coerce(newline()$Character)@String,
--                "   to your worspace using jlUsing.",
--                coerce(newline()$Character)@String,
--                "   JlUsing(_"Plots_") should return true for example."])$String

    not jlUsing(coerce("StatsPlots"))
      => error concat(["Could not load the Julia package StatsPlots.", _
                 coerce(newline()$Character)@String,
                 "   Use the jlAddPackage function or Julia",
                 " itself to add it to your workspace."])$String

    -- jlEvalString("gaston()")
    -- jlEvalString("WGLMakie.activate!()")

    display() : Void == jlEvalString("gui()")

    jlRange(seg)  ==
        xHi := coerce(high(seg))@SF
        xLo := coerce(low(seg))@SF
        v := qnew(POINTS)$JuliaFloat64Vector
        xLow := coerce(xLo)@JF64
        xPad := coerce((xHi - xLo)/(POINTS-1))@JF64
        for i in 1..POINTS repeat
            qsetelt!(v, i, xLow)
            xLow := xLow + xPad
        v

    jlRange(seg, n)  ==
        xHi := coerce(high(seg))@SF
        xLo := coerce(low(seg))@SF
        xPad := coerce((xHi - xLo)/(n-1))@JF64
        v := qnew(n)$JuliaFloat64Vector
        xLow := coerce(xLo)@JF64
        xPad := coerce((xHi - xLo)/(n-1))@JF64
        for i in 1..n repeat
            qsetelt!(v, i, xLow)
            xLow := xLow + xPad
        v

    jlDensity(x)    ==
        jlApply(jstr("density"), x)
        display()
    jlDensity!(x)   ==
        jlApply(jstr("density!"), x)
        display()
    jlPlot(x,y)     ==
        jlApply(jstr("plot"), x, y)
        display()
    jlPlot!(x,y)    ==
        jlApply(jstr("plot!"), x, y)
        display()
    jlPlot(x,y,z)   ==
        jlApply(jstr("plot"), x, y, z)
        display()
    jlPlot!(x,y,z)  ==
        jlApply(jstr("plot!"), x, y, z)
        display()
    jlCurves(x,y)   ==
        jlApply(jstr("curves"), x, y)
        display()
    jlCurves!(x,y)  ==
        jlApply(jstr("curves!"), x, y)
        display()
    jlBar(x,y) ==
        jlApply(jstr("bar"),x, y)
        display()
    jlBar!(x,y) ==
        jlApply(jstr("bar!"),x, y)
        display()
    jlSurface(x,y, mat : JuliaFloat64Matrix)  ==
        jl_2v2dfunction("surface",x,y,jlVector(mat), nrows(mat))$Lisp
        display()
    jlSurface!(x,y, mat : JuliaFloat64Matrix)     ==
        jl_2v2dfunction("surface!",x,y,jlVector(mat), nrows(mat))$Lisp
        display()
    jlWireframe(x,y,mat)     ==
        jl_2v2dfunction("wireframe",x,y,jlVector(mat), nrows(mat))$Lisp
        display()
    jlWireframe!(x,y,mat)     ==
        jl_2v2dfunction("wireframe!",x,y,jlVector(mat), nrows(mat))$Lisp
        display()
    jlContour(x,y,mat) ==
        jl_2v2dfunction("contour",x,y,jlVector(mat), nrows(mat))$Lisp
        display()
    jlContour!(x,y,mat) ==
        jl_2v2dfunction("contour!",x,y,jlVector(mat), nrows(mat))$Lisp
        display()
    jlContourf(x,y,mat) ==
        jl_2v2dfunction("contourf",x,y,jlVector(mat), nrows(mat))$Lisp
        display()
    jlContourf!(x,y,mat) ==
        jl_2v2dfunction("contourf!",x,y,jlVector(mat), nrows(mat))$Lisp
        display()

    -- Plot attributes

    jlPlotTitle!(title)    ==
        jlEvalString(concat(["display(title!(_"",str(title),"_"))"]))
    jlPlotXlims!(x,y)      ==
        jlApply(jstr("xlims!"), x, y)
        display()
    jlPlotYlims!(x,y)      ==
        jlApply(jstr("ylims!"), x, y)
        display()
    jlPlotZlims!(x,y)      ==
        jlApply(jstr("zlims!"), x, y)
        display()
    jlPlotXlabel!(xlabel)  ==
        jlEvalString(concat(["display(xlabel!(_"",str(xlabel),"_"))"]))
    jlPlotYlabel!(ylabel)  ==
        jlEvalString(concat(["display(ylabel!(_"",str(ylabel),"_"))"]))
    jlPlotZlabel!(zlabel)  ==
        jlEvalString(concat(["display(zlabel!(_"",str(zlabel),"_"))"]))

    -- FROM HERE: should be in another package
    -- TODO: factorize

    jlPlot(func : SF -> SF, seg : SEG) ==
        v  := jlRange(seg)
        v1 := map(x+->coerce(func(pdf(x))), v)
        jlPlot(v,v1)

    jlPlot!(func : SF -> SF, seg : SEG) ==
        v  := jlRange(seg)
        v1 := map(x+->coerce(func(pdf(x))), v)
        jlPlot!(v,v1)

    jlPlot(func : ((SF, SF) -> SF), s1 : SEG, s2 : SEG) ==
        v1 := jlRange(s1)
        v2 := jlRange(s2)
        v  := map((x,y)+->coerce(func(pdf(x), pdf(y))), v1, v2)
        jlPlot(v1, v2, v)

    jlPlot!(func : ((SF, SF) -> SF), s1 : SEG, s2 : SEG) ==
        v1 := jlRange(s1)
        v2 := jlRange(s2)
        v  := map((x,y)+->coerce(func(pdf(x), pdf(y))), v1, v2)
        jlPlot!(v1, v2, v)

    jlWireframe(func : ((SF, SF) -> SF), s1 : SEG, s2 : SEG) ==
        v1 := jlRange(s1)
        v2 := jlRange(s2)
        height := qnew(POINTS,POINTS)$JF64MAT
        for i in 1..POINTS repeat
            for j in 1..POINTS repeat
                qsetelt!(height, i, j, coerce(func(pdf(qelt(v1,i)),
                                                pdf(qelt(v2,j)))))
        jlWireframe(v1, v2, height)

    jlWireframe!(func : ((SF, SF) -> SF), s1 : SEG, s2 : SEG) ==
        v1 := jlRange(s1)
        v2 := jlRange(s2)
        height := qnew(POINTS,POINTS)$JF64MAT
        for i in 1..POINTS repeat
            for j in 1..POINTS repeat
                qsetelt!(height, i, j, coerce(func(pdf(qelt(v1,i)),
                                                pdf(qelt(v2,j)))))
        jlWireframe!(v1, v2, height)

    jlSurface(func : ((SF, SF) -> SF), s1 : SEG, s2 : SEG) ==
        v1 := jlRange(s1)
        v2 := jlRange(s2)
        height := qnew(POINTS,POINTS)$JF64MAT
        for i in 1..POINTS repeat
            for j in 1..POINTS repeat
                qsetelt!(height, i, j, coerce(func(pdf(qelt(v1,i)),
                                                pdf(qelt(v2,j)))))
        jlSurface(v1, v2, height)

    jlSurface!(func : ((SF, SF) -> SF), s1 : SEG, s2 : SEG) ==
        v1 := jlRange(s1)
        v2 := jlRange(s2)
        height := qnew(POINTS,POINTS)$JF64MAT
        for i in 1..POINTS repeat
            for j in 1..POINTS repeat
                qsetelt!(height, i, j, coerce(func(pdf(qelt(v1,i)),
                                                pdf(qelt(v2,j)))))
        jlSurface!(v1, v2, height)

    jlContour(func : ((SF, SF) -> SF), s1 : SEG, s2 : SEG) ==
        v1 := jlRange(s1)
        v2 := jlRange(s2)
        height := qnew(POINTS,POINTS)$JF64MAT
        for i in 1..POINTS repeat
            for j in 1..POINTS repeat
                qsetelt!(height, i, j, coerce(func(pdf(qelt(v1,i)),
                                                pdf(qelt(v2,j)))))
        jlContour(v1, v2, height)

    jlContour!(func : ((SF, SF) -> SF), s1 : SEG, s2 : SEG) ==
        v1 := jlRange(s1)
        v2 := jlRange(s2)
        height := qnew(POINTS,POINTS)$JF64MAT
        for i in 1..POINTS repeat
            for j in 1..POINTS repeat
                qsetelt!(height, i, j, coerce(func(pdf(qelt(v1,i)),
                                                pdf(qelt(v2,j)))))
        jlContour!(v1, v2, height)

    jlContourf(func : ((SF, SF) -> SF), s1 : SEG, s2 : SEG) ==
        v1 := jlRange(s1)
        v2 := jlRange(s2)
        height := qnew(POINTS,POINTS)$JF64MAT
        for i in 1..POINTS repeat
            for j in 1..POINTS repeat
                qsetelt!(height, i, j, coerce(func(pdf(qelt(v1,i)),
                                                pdf(qelt(v2,j)))))
        jlContourf(v1, v2, height)

    jlContourf!(func : ((SF, SF) -> SF), s1 : SEG, s2 : SEG) ==
        v1 := jlRange(s1)
        v2 := jlRange(s2)
        height := qnew(POINTS,POINTS)$JF64MAT
        for i in 1..POINTS repeat
            for j in 1..POINTS repeat
                qsetelt!(height, i, j, coerce(func(pdf(qelt(v1,i)),
                                                pdf(qelt(v2,j)))))
        jlContourf!(v1, v2, height)

)abbrev package JDRAW JuliaDrawFunctions
++ Author: G. Vanuxem
++ Date Created: march 2023
++ Basic Operations: jlPlot, jlSurface
++ Related Constructors: JuliaPlotFunctions
++ Keywords: jlPlot, jlSurface
++ Description: JuliaDrawFunctions provides
++ top level functions for drawing graphics of expressions.
JuliaDrawFunctions(Ex : Join(ConvertibleTo InputForm, SetCategory)):
        Exports == Implementation where
    JF64    ==> JuliaFloat64
    SF      ==> DoubleFloat
    JF64VEC ==> JuliaFloat64Vector
    JF64MAT ==> JuliaFloat64Matrix
    BIND    ==> SegmentBinding Float
    Exports ==> with

        --% Two Dimensional plotting functions

        jlPlot : (Ex, BIND) -> Void
        ++ jlPlot(f(x), x = a..b) draws the graph of \spad{y = f(x)} as x
        ++ ranges from \spad{min(a, b)} to \spad{max(a, b)}.
        ++ \spad{f(x)} appears the title.
        jlPlot! : (Ex, BIND) -> Void
        ++ jlPlot!(f(x), x = a..b) adds the graph of \spad{y = f(x)} as x
        ++ ranges from \spad{min(a, b)} to \spad{max(a, b)}
        ++ on the existing graphic window. \spad{f(x)} appears
        ++ as the title.

        --% Three Dimensional plotting functions

        jlPlot : (Ex, BIND, BIND) -> Void
        ++ jlPlot(f(x, y), x = a..b, y = c..d) draws the graph of
        ++ \spad{z = f(x, y)} as x ranges from \spad{min(a, b)} to
        ++ to \spad{max(a, b)} and y ranges from \spad{min(c, d)}
        ++ to \spad{max(c, d)}. \spad{f(x, y)} appears as the title.
        jlPlot! : (Ex, BIND, BIND) -> Void
        ++ jlPlot!(f(x, y), x = a..b, y = c..d) adds the graph of
        ++ \spad{z = f(x, y)} as x ranges from \spad{min(a, b)}
        ++ to \spad{max(a, b)} and y ranges from \spad{min(c, d)}
        ++ to \spad{max(c, d)} on the existing graph window.
        ++ \spad{f(x, y)} appears as the title.
        jlWireframe : (Ex, BIND, BIND) -> Void
        ++ jlWireframe(f(x, y), x = a..b, y = c..d) draws the wireframe of
        ++ \spad{z = f(x, y)} as x ranges from \spad{min(a, b)} to
        ++ to \spad{max(a, b)} and y ranges from \spad{min(c, d)}
        ++ to \spad{max(c, d)}; \spad{f(x, y)} appears as the title.
        jlWireframe! : (Ex, BIND, BIND) -> Void
        ++ jlWireframe!(f(x, y), x = a..b, y = c..d) adds the wireframe of
        ++ \spad{z = f(x, y)} as x ranges from \spad{min(a, b)}
        ++ to \spad{max(a, b)} and y ranges from \spad{min(c, d)}
        ++ to \spad{max(c, d)} on the existing graph window.
        ++ \spad{f(x, y)} appears as the title.
        jlSurface : (Ex, BIND, BIND) -> Void
        ++ jlSurface(f(x, y), x = a..b, y = c..d) draws the surface of
        ++ \spad{z = f(x, y)} as x ranges from \spad{min(a, b)} to
        ++ to \spad{max(a, b)} and y ranges from \spad{min(c, d)}
        ++ to \spad{max(c, d)}. \spad{f(x, y)} appears as the title.
        jlSurface! : (Ex, BIND, BIND) -> Void
        ++ jlSurface!(f(x, y), x = a..b, y = c..d) adds the surface of
        ++ \spad{z = f(x, y)} as x ranges from \spad{min(a, b)}
        ++ to \spad{max(a, b)} and y ranges from \spad{min(c, d)}
        ++ to \spad{max(c, d)} on the existing graph window.
        ++ \spad{f(x, y)} appears as the title.
        jlContour : (Ex, BIND, BIND) -> Void
        ++ jlContour(f(x, y), x = a..b, y = c..d) draws the surface of
        ++ \spad{z = f(x, y)} as x ranges from \spad{min(a, b)} to
        ++ to \spad{max(a, b)} and y ranges from \spad{min(c, d)}
        ++ to \spad{max(c, d)}. \spad{f(x, y)} appears as the title.
        jlContour! : (Ex, BIND, BIND) -> Void
        ++ jlContour!(f(x, y), x = a..b, y = c..d) adds the surface of
        ++ \spad{z = f(x, y)} as x ranges from \spad{min(a, b)}
        ++ to \spad{max(a, b)} and y ranges from \spad{min(c, d)}
        ++ to \spad{max(c, d)} on the existing graph window.
        ++ \spad{f(x, y)} appears as the title.
        jlContourf : (Ex, BIND, BIND) -> Void
        ++ jlContourf(f(x, y), x = a..b, y = c..d) draws the surface of
        ++ \spad{z = f(x, y)} as x ranges from \spad{min(a, b)} to
        ++ to \spad{max(a, b)} and y ranges from \spad{min(c, d)}
        ++ to \spad{max(c, d)}. \spad{f(x, y)} appears as the title.
        ++ Fill area between contours.
        jlContourf! : (Ex, BIND, BIND) -> Void
        ++ jlContourf!(f(x, y), x = a..b, y = c..d) adds the surface of
        ++ \spad{z = f(x, y)} as x ranges from \spad{min(a, b)}
        ++ to \spad{max(a, b)} and y ranges from \spad{min(c, d)}
        ++ to \spad{max(c, d)} on the existing graph window.
        ++ \spad{f(x, y)} appears as the title.
        ++ Fill area between contours.

    Implementation ==> add
        import from JuliaPlotFunctions
        import from MakeFloatCompiledFunction(Ex)

        pdf(x)      ==> x pretend SF
        title(form) ==> coerce(unparse(convert(form))$InputForm)

        jlPlot(f : Ex, bind : BIND) ==
            func := makeFloatFunction(f, variable bind)
            v := jlRange(segment bind)
            ret := map(x+->coerce(func(pdf(x))),v)
            jlPlot(v, ret)
            jlPlotTitle!(title(f))

        jlPlot!(f : Ex, bind : BIND) ==
            func := makeFloatFunction(f, variable bind)
            v := jlRange(segment bind)
            ret := map(x+->coerce(func(pdf(x))),v)
            jlPlot!(v, ret)
            jlPlotTitle!(title(f))
        
        jlPlot(f : Ex, b1 : BIND, b2 : BIND) ==
            func := makeFloatFunction(f, variable b1, variable b2)
            jlPlot(func, segment b1, segment b2)
            jlPlotTitle!(title(f))

        jlPlot!(f : Ex, b1 : BIND, b2 : BIND) ==
            func := makeFloatFunction(f, variable b1, variable b2)
            jlPlot!(func, segment b1, segment b2)
            jlPlotTitle!(title(f))

        jlWireframe(f : Ex, b1 : BIND, b2 : BIND) ==
            func := makeFloatFunction(f, variable b1, variable b2)
            jlWireframe(func, segment b1, segment b2)
            jlPlotTitle!(title(f))

        jlWireframe!(f : Ex, b1 : BIND, b2 : BIND) ==
            func := makeFloatFunction(f, variable b1, variable b2)
            jlWireframe!(func, segment b1, segment b2)
            jlPlotTitle!(title(f))

        jlSurface(f : Ex, b1 : BIND, b2 : BIND) ==
            func := makeFloatFunction(f, variable b1, variable b2)
            jlSurface(func, segment b1, segment b2)
            jlPlotTitle!(title(f))

        jlSurface!(f : Ex, b1 : BIND, b2 : BIND) ==
            func := makeFloatFunction(f, variable b1, variable b2)
            jlSurface!(func, segment b1, segment b2)
            jlPlotTitle!(title(f))

        jlContour(f : Ex, b1 : BIND, b2 : BIND) ==
            func := makeFloatFunction(f, variable b1, variable b2)
            jlContour(func, segment b1, segment b2)
            jlPlotTitle!(title(f))

        jlContour!(f : Ex, b1 : BIND, b2 : BIND) ==
            func := makeFloatFunction(f, variable b1, variable b2)
            jlContour!(func, segment b1, segment b2)
            jlPlotTitle!(title(f))

        jlContourf(f : Ex, b1 : BIND, b2 : BIND) ==
            func := makeFloatFunction(f, variable b1, variable b2)
            jlContourf(func, segment b1, segment b2)
            jlPlotTitle!(title(f))

        jlContourf!(f : Ex, b1 : BIND, b2 : BIND) ==
            func := makeFloatFunction(f, variable b1, variable b2)
            jlContourf!(func, segment b1, segment b2)
            jlPlotTitle!(title(f))
