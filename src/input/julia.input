)set break resume
)set mess type off
)expose UnittestCount UnittestAux Unittest

testsuite "Julia"
testcase "Julia availability"
testTrue("not jlInitialize(false)")
testTrue("jlInitialize(true)")

testcase "JuliaString"
str := "hello"::JuliaString;
testEquals("coerce(str)@String", "_"hello_"")
testEquals(str,coerce("hello")@JuliaString)
testEquals("str","jstring(_"hello_")")
testEquals("string(str)","_"hello_"")

testTrue("jlRegexMatch?(jlRegex(str), _"hello world_")")
testEquals("jlRegexMatch(jlRegex(str), _"hello world_")", "jstring(_"hello_")")
ret := jlRegexMatch(jlRegex("(h[a-z]+)\s*(the)?\s+(world)"), _
    "hello world")@List(JSTR);
testEquals("#ret", "3")
testEquals("ret.2", "jstring(_"_")")

ret := jlRegexMatch(jlRegex("(?<hours>\d+):(?<minutes>\d+)"), _
    "18:00")@AssociationList(JSTR,JSTR);
testEquals("qelt(ret, jstring(_"hours_"))", "jstring(_"18_")")
testEquals("jlRegexReplace(_"herro world_",jlRegex(_"rr_"),_
    jlSubstitute(_"ll_"))", "_"hello world_"")

testcase "JuliaSymbol"
sym   := jsym "mysym";
ssym  := ":mysym"; 
jssym := jstring ":mysym"; 
testEquals("string(sym)","ssym")
testEquals("jstring(sym)", "jssym")
testEquals("coerce(coerce(_"mysym_")@Symbol)@JSYM","sym")

testcase "JuliaInt64"
testEquals("coerce(0$JI64)@SINT","0$SINT")
testEquals("coerce(0$SINT)@JI64","0$JI64")
testEquals("convert(0$JI64)@Integer","0$Integer")
testEquals("ji64(0$SINT)","0$JI64")
testEquals("ji64(0$INT)","0$Integer")

testcase "JuliaFloat64"
testEquals("coerce(0$JF64)@SF","0$SF")
testEquals("coerce(0$SF)@JF64","0$JF64")
testEquals("convert(0$JF64)@JSTR","jstring(_"0.0_")")
testEquals("convert(0$JF64)@Float","0$Float")
testEquals("jf64(0$SF)","0$JF64")
testEquals("jf64(0$Integer)","0$JF64")

testcase "JuliaUtilityFunctions"

testTrue("jlEvalString(_"isnothing(using LinearAlgebra)_")@Boolean")
testTrue("jlEvalString(_"isnothing(import LinearAlgebra.svd)_")@Boolean")
testEquals("jlEvalString(_"0.0_")@JF64","0$JF64")

czero := coerce(0$JF64)@JCF64;
cone  := coerce(1$JF64)@JCF64;
vec   := vector([0$JF64, 1$JF64]);
mat   := matrix([[1$JF64, 0$JF64],[0$JF64, 1$JF64]]);
cvec  := vector([czero, cone])@JCF64VEC;
cmat  := matrix([[cone, czero],[czero, cone]])@JCF64MAT;
testTrue("jlApprox?(0$JF64,0$JF64)")
testTrue("jlApprox?(cone,cone)")
testTrue("jlApprox?(vec,vec)")
testTrue("jlApprox?(mat,mat)")
testTrue("jlApprox?(cvec,cvec)")
testTrue("jlApprox?(cmat,cmat)")

testTrue("jlDefined?(jsym _"showerror_")")
testTrue("jlDefined?(jstring _"showerror_")")
testTrue("jlDefined?(_"showerror_")")

testEquals("jlApply(_"exp_",1$JF64)","exp(1$JF64)")
testEquals("jlApply(_"-_",1$JF64,1$JF64)","0$JF64")
testEquals("jlApply(_"+_",0$JF64,0$JF64,1$JF64)","1$JF64")

statistics()
